using System.Collections.Immutable;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;

namespace Macaron.InterfaceDelegation.Tests;

[TestFixture]
public class InterfaceDelegationGeneratorTests
{
    private static void Assert(string sourceCode, string expected)
    {
        var references = AppDomain
            .CurrentDomain
            .GetAssemblies()
            .Where(assembly => !assembly.IsDynamic && !string.IsNullOrWhiteSpace(assembly.Location))
            .Select(assembly => MetadataReference.CreateFromFile(assembly.Location))
            .Cast<MetadataReference>()
            .ToImmutableArray();

        var syntaxTree = CSharpSyntaxTree.ParseText(sourceCode);
        var compilation = CSharpCompilation.Create(
            assemblyName: "Macaron.InterfaceDelegation.Tests",
            syntaxTrees: [syntaxTree],
            references: references,
            options: new CSharpCompilationOptions(
                outputKind: OutputKind.DynamicallyLinkedLibrary,
                nullableContextOptions: NullableContextOptions.Enable
            )
        );

        var generator = new InterfaceDelegationGenerator();
        var driver = CSharpGeneratorDriver.Create(generator);

        var result = driver.RunGenerators(compilation).GetRunResult().Results.Single();
        var generatedSources = result.GeneratedSources;
        var actual = generatedSources.Length > 2 ? generatedSources[2].SourceText.ToString() : "";

        NUnit.Framework.Assert.That(actual, Is.EqualTo(expected));
    }

    [Test]
    public void ImplementationOfAttributeOnField()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IGreeter
            {
                string Greet(string name);
            }

            public class RealGreeter : IGreeter
            {
                public string Greet(string name) => $"Hello, {name}!";
            }

            public partial class TestClass : IGreeter
            {
                [ImplementationOf(typeof(IGreeter))]
                private readonly IGreeter _impl = new RealGreeter();
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class TestClass
                {
                    #region Implementation of Macaron.InterfaceDelegation.Tests.IGreeter
                    public string Greet(string name) => _impl.Greet(name);
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void ImplementationOfAttributeOnProperty()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IGreeter
            {
                string Greet(string name);
            }

            public class RealGreeter : IGreeter
            {
                public string Greet(string name) => $"Hello, {name}!";
            }

            public partial class TestClass : IGreeter
            {
                [ImplementationOf(typeof(IGreeter))]
                private readonly IGreeter Impl { get; } = new RealGreeter();
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class TestClass
                {
                    #region Implementation of Macaron.InterfaceDelegation.Tests.IGreeter
                    public string Greet(string name) => Impl.Greet(name);
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void MultipleImplementationOfAttributesOnSingleMember()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IGreeterA
            {
                string GreetA(string name);
            }

            public interface IGreeterB
            {
                string GreetB(string name);
            }

            public class RealGreeter : IGreeterA, IGreeterB
            {
                public string GreetA(string name) => $"Hello, {name}!";

                public string GreetB(string name) => $"Hello, {name}!";
            }

            public partial class TestClass : IGreeterA, IGreeterB
            {
                [ImplementationOf(typeof(IGreeterA))]
                [ImplementationOf(typeof(IGreeterB))]
                private readonly IGreeter Impl { get; } = new RealGreeter();
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class TestClass
                {
                    #region Implementation of Macaron.InterfaceDelegation.Tests.IGreeterA
                    public string GreetA(string name) => Impl.GreetA(name);
                    #endregion

                    #region Implementation of Macaron.InterfaceDelegation.Tests.IGreeterB
                    public string GreetB(string name) => Impl.GreetB(name);
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void MultipleImplementationOfAttributesOnInterfaceImplementedSingleMember()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IGreeterA
            {
                string Greet(string name);
            }

            public interface IGreeterB
            {
                string Greet(string name);
            }

            public class RealGreeter : IGreeterA, IGreeterB
            {
                string IGreeterA.Greet(string name) => $"Hello, {name}!";

                string IGreeterB.Greet(string name) => $"Hello, {name}!";
            }

            public partial class TestClass : IGreeterA, IGreeterB
            {
                [ImplementationOf(typeof(IGreeterA))]
                [ImplementationOf(typeof(IGreeterB))]
                private readonly RealGreeter Impl { get; } = new RealGreeter();
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class TestClass
                {
                    #region Implementation of Macaron.InterfaceDelegation.Tests.IGreeterA
                    public string Greet(string name) => ((Macaron.InterfaceDelegation.Tests.IGreeterA)Impl).Greet(name);
                    #endregion

                    #region Implementation of Macaron.InterfaceDelegation.Tests.IGreeterB
                    public string Greet(string name) => ((Macaron.InterfaceDelegation.Tests.IGreeterB)Impl).Greet(name);
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void MultipleImplementationOfAttributesOnMultipleMembers()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IGreeterA
            {
                string GreetA(string name);
            }

            public interface IGreeterB
            {
                string GreetB(string name);
            }

            public class RealGreeter : IGreeterA, IGreeterB
            {
                public string GreetA(string name) => $"Hello, {name}!";

                public string GreetB(string name) => $"Hello, {name}!";
            }

            public partial class TestClass : IGreeterA, IGreeterB
            {
                [ImplementationOf(typeof(IGreeterA))]
                private readonly IGreeterA ImplA { get; } = new RealGreeter();

                [ImplementationOf(typeof(IGreeterB))]
                private readonly IGreeterB ImplB { get; } = new RealGreeter();
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class TestClass
                {
                    #region Implementation of Macaron.InterfaceDelegation.Tests.IGreeterA
                    public string GreetA(string name) => ImplA.GreetA(name);
                    #endregion

                    #region Implementation of Macaron.InterfaceDelegation.Tests.IGreeterB
                    public string GreetB(string name) => ImplB.GreetB(name);
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void InterfaceHasPropertiesAndIndexer()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IPropertyExample
            {
                int Id { get; set; }

                string Name { get; }

                string this[int index] { get; set; }
            }

            public class PropertyExampleImpl : IPropertyExample
            {
                private readonly Dictionary<int, string> _data = new();

                public int Id { get; set; }

                public string Name => "Example";

                public string this[int index]
                {
                    get => _data[index];
                    set => _data[index] = value;
                }
            }

            public partial class TestPropertyDelegation : IPropertyExample
            {
                [ImplementationOf(typeof(IPropertyExample))]
                private readonly IPropertyExample _impl = new PropertyExampleImpl();
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class TestPropertyDelegation
                {
                    #region Implementation of Macaron.InterfaceDelegation.Tests.IPropertyExample
                    public int Id
                    {
                        get => _impl.Id;
                        set => _impl.Id = value;
                    }

                    public string Name
                    {
                        get => _impl.Name;
                    }

                    public string this[int index]
                    {
                        get => _impl[index];
                        set => _impl[index] = value;
                    }
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void InterfaceHasMethodOverloads()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface ICalculator
            {
                int Add(int a, int b);

                double Add(double a, double b);
            }

            public class CalculatorImpl : ICalculator
            {
                public int Add(int a, int b) => a + b;

                public double Add(double a, double b) => a + b;
            }

            public partial class TestMethodOverloads : ICalculator
            {
                [ImplementationOf(typeof(ICalculator))]
                private readonly ICalculator _impl = new CalculatorImpl();
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class TestMethodOverloads
                {
                    #region Implementation of Macaron.InterfaceDelegation.Tests.ICalculator
                    public int Add(int a, int b) => _impl.Add(a, b);

                    public double Add(double a, double b) => _impl.Add(a, b);
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void DelegationInStruct()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IStructInterface
            {
                void DoSomething();
            }

            public class StructImpl : IStructInterface
            {
                public void DoSomething() { }
            }

            public partial struct TestStructDelegation : IStructInterface
            {
                [ImplementationOf(typeof(IStructInterface))]
                private readonly IStructInterface _impl;

                public TestStructDelegation()
                {
                    _impl = new StructImpl();
                }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial struct TestStructDelegation
                {
                    #region Implementation of Macaron.InterfaceDelegation.Tests.IStructInterface
                    public void DoSomething() => _impl.DoSomething();
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void DelegationInRecord()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IRecordInterface
            {
                void DoSomething();
            }

            public class RecordImpl : IRecordInterface
            {
                public void DoSomething() { }
            }

            public partial record TestRecordDelegation([ImplementationOf(typeof(IRecordInterface))] RecordImpl Impl) : IRecordInterface
            {
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial record TestRecordDelegation
                {
                    #region Implementation of Macaron.InterfaceDelegation.Tests.IRecordInterface
                    public void DoSomething() => ((Macaron.InterfaceDelegation.Tests.IRecordInterface)Impl).DoSomething();
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void DelegationInStructRecord()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IRecordInterface
            {
                void DoSomething();
            }

            public class RecordImpl : IRecordInterface
            {
                public void DoSomething() { }
            }

            public partial record struct TestRecordDelegation([ImplementationOf(typeof(IRecordInterface))] RecordImpl Impl) : IRecordInterface
            {
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial record struct TestRecordDelegation
                {
                    #region Implementation of Macaron.InterfaceDelegation.Tests.IRecordInterface
                    public void DoSomething() => ((Macaron.InterfaceDelegation.Tests.IRecordInterface)Impl).DoSomething();
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void PartialImplicitImplementationExistsWithAutoMode()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IFoo
            {
                void MethodA();

                void MethodB();
            }

            public class FooImpl : IFoo
            {
                public void MethodA() { }

                public void MethodB() { }
            }

            public partial class TestPartialAutoImplicit : IFoo
            {
                [ImplementationOf(typeof(IFoo))]
                private readonly IFoo _impl = new FooImpl();

                public void MethodA() { }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class TestPartialAutoImplicit
                {
                    #region Implementation of Macaron.InterfaceDelegation.Tests.IFoo
                    public void MethodB() => _impl.MethodB();
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void PartialExplicitImplementationExistsWithAutoMode()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IFoo
            {
                void MethodA();

                void MethodB();
            }

            public class FooImpl : IFoo
            {
                public void MethodA() { }

                public void MethodB() { }
            }

            public partial class TestPartialAutoExplicit : IFoo
            {
                [ImplementationOf(typeof(IFoo))]
                private readonly IFoo _impl = new FooImpl();

                void IFoo.MethodA() { }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class TestPartialAutoExplicit
                {
                    #region Implementation of Macaron.InterfaceDelegation.Tests.IFoo
                    public void MethodB() => _impl.MethodB();
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void ImplicitImplementationMode()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IFoo
            {
                void MethodA();

                void MethodB();
            }

            public class FooImpl : IFoo
            {
                public void MethodA() { }

                public void MethodB() { }
            }

            public partial class TestPartialImplicit : IFoo
            {
                [ImplementationOf(typeof(IFoo), ImplementationMode.Implicit)]
                private readonly IFoo _impl = new FooImpl();
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class TestPartialImplicit
                {
                    #region Implementation of Macaron.InterfaceDelegation.Tests.IFoo
                    public void MethodA() => _impl.MethodA();

                    public void MethodB() => _impl.MethodB();
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void PartialImplicitImplementationExistsWithImplicitMode()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IFoo
            {
                void MethodA();

                void MethodB();
            }

            public class FooImpl : IFoo
            {
                public void MethodA() { }

                public void MethodB() { }
            }

            public partial class TestPartialImplicit : IFoo
            {
                [ImplementationOf(typeof(IFoo), ImplementationMode.Implicit)]
                private readonly IFoo _impl = new FooImpl();

                public void MethodA() { }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class TestPartialImplicit
                {
                    #region Implementation of Macaron.InterfaceDelegation.Tests.IFoo
                    public void MethodB() => _impl.MethodB();
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void PartialExplicitImplementationExistsWithImplicitMode()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IFoo
            {
                void MethodA();

                void MethodB();
            }

            public class FooImpl : IFoo
            {
                public void MethodA() { }

                public void MethodB() { }
            }

            public partial class TestPartialImplicit : IFoo
            {
                [ImplementationOf(typeof(IFoo), ImplementationMode.Implicit)]
                private readonly IFoo _impl = new FooImpl();

                void IFoo.MethodA() { }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class TestPartialImplicit
                {
                    #region Implementation of Macaron.InterfaceDelegation.Tests.IFoo
                    public void MethodB() => _impl.MethodB();
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void ExplicitImplementationMode()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IService
            {
                void Execute();
            }

            public class ServiceImpl : IService
            {
                public void Execute() { }
            }

            public partial class TestExplicitMode : IService
            {
                [ImplementationOf(typeof(IService), ImplementationMode.Explicit)]
                private readonly IService _impl = new ServiceImpl();
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class TestExplicitMode
                {
                    #region Implementation of Macaron.InterfaceDelegation.Tests.IService
                    void Macaron.InterfaceDelegation.Tests.IService.Execute() => _impl.Execute();
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void PartialExplicitImplementationExistsWithExplicitMode()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IFoo
            {
                void MethodA();

                void MethodB();
            }

            public class FooImpl : IFoo
            {
                public void MethodA() { }

                public void MethodB() { }
            }

            public partial class TestPartialExplicit : IFoo
            {
                [ImplementationOf(typeof(IFoo), ImplementationMode.Explicit)]
                private readonly IFoo _impl = new FooImpl();

                void IFoo.MethodA() { }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class TestPartialExplicit
                {
                    #region Implementation of Macaron.InterfaceDelegation.Tests.IFoo
                    void Macaron.InterfaceDelegation.Tests.IFoo.MethodB() => _impl.MethodB();
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void PartialImplicitImplementationExistsWithExplicitMode()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IFoo
            {
                void MethodA();

                void MethodB();
            }

            public class FooImpl : IFoo
            {
                public void MethodA() { }

                public void MethodB() { }
            }

            public partial class TestPartialExplicit : IFoo
            {
                [ImplementationOf(typeof(IFoo), ImplementationMode.Explicit)]
                private readonly IFoo _impl = new FooImpl();

                public MethodA() { }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class TestPartialExplicit
                {
                    #region Implementation of Macaron.InterfaceDelegation.Tests.IFoo
                    void Macaron.InterfaceDelegation.Tests.IFoo.MethodA() => _impl.MethodA();

                    void Macaron.InterfaceDelegation.Tests.IFoo.MethodB() => _impl.MethodB();
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void HasAbstractMember()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IAbstractExample
            {
                int GetAnswer();

                void DoSomething();
            }

            public class AbstractExampleImpl : IAbstractExample
            {
                public int GetAnswer() => 42;

                public void DoSomething() { }
            }

            public partial class TestAbstractDelegation : IAbstractExample
            {
                [ImplementationOf(typeof(IAbstractExample))]
                private readonly IAbstractExample _impl = new AbstractExampleImpl();

                public abstract int GetAnswer();
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class TestAbstractDelegation
                {
                    #region Implementation of Macaron.InterfaceDelegation.Tests.IAbstractExample
                    public void DoSomething() => _impl.DoSomething();
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void HasAbstractMemberInParent()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IAbstractExample
            {
                int GetAnswer();
            }

            public class AbstractExampleImpl : IAbstractExample
            {
                public int GetAnswer() => 42;
            }

            public abstract class TestAbstractDelegationBase
            {
                public abstract int GetAnswer();
            }

            public partial class TestAbstractDelegation : TestAbstractDelegationBase, IAbstractExample
            {
                [ImplementationOf(typeof(IAbstractExample))]
                private readonly IAbstractExample _impl = new AbstractExampleImpl();
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class TestAbstractDelegation
                {
                    #region Implementation of Macaron.InterfaceDelegation.Tests.IAbstractExample
                    public override int GetAnswer() => _impl.GetAnswer();
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void HasOverrideMember()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IAbstractExample
            {
                int GetAnswer();

                void DoSomething();
            }

            public class AbstractExampleImpl : IAbstractExample
            {
                public int GetAnswer() => 42;

                public void DoSomething() { }
            }

            public abstract class TestAbstractDelegationBase
            {
                public abstract int GetAnswer();
            }

            public partial class TestAbstractDelegation : TestAbstractDelegationBase
            {
                [ImplementationOf(typeof(IAbstractExample))]
                private readonly IAbstractExample _impl = new AbstractExampleImpl();

                public override int GetAnswer() => 42;
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class TestAbstractDelegation
                {
                    #region Implementation of Macaron.InterfaceDelegation.Tests.IAbstractExample
                    public void DoSomething() => _impl.DoSomething();
                    #endregion
                }
            }

            """
        );
    }
}
