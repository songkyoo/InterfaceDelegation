using System.Collections.Immutable;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;

namespace Macaron.InterfaceDelegation.Tests;

[TestFixture]
public class InterfaceDelegationGeneratorTests
{
    private static void Assert(string sourceCode, string expected)
    {
        var attributeAssembly = typeof(ImplementationOfAttribute).Assembly;
        var references = AppDomain
            .CurrentDomain
            .GetAssemblies()
            .Where(assembly => !assembly.IsDynamic && !string.IsNullOrWhiteSpace(assembly.Location))
            .Append(attributeAssembly)
            .Select(assembly => MetadataReference.CreateFromFile(assembly.Location))
            .Cast<MetadataReference>()
            .ToImmutableArray();

        var syntaxTree = CSharpSyntaxTree.ParseText(sourceCode);
        var compilation = CSharpCompilation.Create(
            assemblyName: "Macaron.InterfaceDelegation.Tests",
            syntaxTrees: [syntaxTree],
            references: references,
            options: new CSharpCompilationOptions(
                outputKind: OutputKind.DynamicallyLinkedLibrary,
                nullableContextOptions: NullableContextOptions.Enable
            )
        );

        foreach (var diagnostic in compilation.GetDiagnostics())
        {
            Console.WriteLine(diagnostic);
        }

        var generator = new InterfaceDelegationGenerator();
        var driver = CSharpGeneratorDriver.Create(generator);

        var result = driver.RunGenerators(compilation).GetRunResult().Results.Single();
        var generatedSources = result.GeneratedSources;
        var actual = generatedSources.Length > 0 ? generatedSources[0].SourceText.ToString() : "";

        NUnit.Framework.Assert.That(actual, Is.EqualTo(expected));
    }

    [Test]
    public void GeneratesDelegation_When_ImplementationOfAppliedToField()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IGreeter
            {
                string Greet(string name);
            }

            public class RealGreeter : IGreeter
            {
                public string Greet(string name) => $"Hello, {name}!";
            }

            public partial class TestClass : IGreeter
            {
                [ImplementationOf(typeof(IGreeter))]
                private readonly IGreeter _impl = new RealGreeter();
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class TestClass
                {
                    #region global::Macaron.InterfaceDelegation.Tests.IGreeter
                    public string Greet(string name)
                        => _impl.Greet(name);
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void GeneratesDelegation_When_ImplementationOfAppliedToProperty()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IGreeter
            {
                string Greet(string name);
            }

            public class RealGreeter : IGreeter
            {
                public string Greet(string name) => $"Hello, {name}!";
            }

            public partial class TestClass : IGreeter
            {
                [ImplementationOf(typeof(IGreeter))]
                private IGreeter Impl { get; } = new RealGreeter();
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class TestClass
                {
                    #region global::Macaron.InterfaceDelegation.Tests.IGreeter
                    public string Greet(string name)
                        => Impl.Greet(name);
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void GeneratesDelegation_ForMultipleInterfaces_OnSingleMember()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IGreeterA
            {
                string GreetA(string name);
            }

            public interface IGreeterB
            {
                string GreetB(string name);
            }

            public class RealGreeter : IGreeterA, IGreeterB
            {
                public string GreetA(string name) => $"Hello, {name}!";

                public string GreetB(string name) => $"Hello, {name}!";
            }

            public partial class TestClass : IGreeterA, IGreeterB
            {
                [ImplementationOf(typeof(IGreeterA))]
                [ImplementationOf(typeof(IGreeterB))]
                private IGreeter Impl { get; } = new RealGreeter();
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class TestClass
                {
                    #region global::Macaron.InterfaceDelegation.Tests.IGreeterA
                    public string GreetA(string name)
                        => Impl.GreetA(name);
                    #endregion

                    #region global::Macaron.InterfaceDelegation.Tests.IGreeterB
                    public string GreetB(string name)
                        => Impl.GreetB(name);
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void GeneratesExplicitDelegation_ForMultipleInterfaces_OnSingleMember()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IGreeterA
            {
                string Greet(string name);

                float this[int index] { get; set; }

                int Value { get; }
            }

            public interface IGreeterB
            {
                void Greet();

                float this[int index] { get; }

                string Value { get; set; }
            }

            public class RealGreeter : IGreeterA, IGreeterB
            {
                string IGreeterA.Greet(string name) => $"Hello, {name}!";

                int IGreeterA.Value => 42;

                float IGreeterA.this[int index]
                {
                    get => 0.0f;
                    set => throw new NotImplementedException();
                }

                void IGreeterB.Greet() { }

                string IGreeterB.Value
                {
                    get => "Hello, world!";
                    set => throw new NotImplementedException();
                }

                float IGreeterB.this[int index]
                {
                    get => 3.14f;
                }
            }

            public partial class TestClass : IGreeterA, IGreeterB
            {
                [ImplementationOf(typeof(IGreeterA), ImplementationMode.Explicit)]
                [ImplementationOf(typeof(IGreeterB), ImplementationMode.Explicit)]
                private RealGreeter Impl { get; } = new RealGreeter();
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class TestClass
                {
                    #region global::Macaron.InterfaceDelegation.Tests.IGreeterA
                    string global::Macaron.InterfaceDelegation.Tests.IGreeterA.Greet(string name)
                    {
                        return ((global::Macaron.InterfaceDelegation.Tests.IGreeterA)Impl).Greet(name);
                    }

                    float global::Macaron.InterfaceDelegation.Tests.IGreeterA.this[int index]
                    {
                        get => ((global::Macaron.InterfaceDelegation.Tests.IGreeterA)Impl)[index];
                        set => ((global::Macaron.InterfaceDelegation.Tests.IGreeterA)Impl)[index] = value;
                    }

                    int global::Macaron.InterfaceDelegation.Tests.IGreeterA.Value
                    {
                        get => ((global::Macaron.InterfaceDelegation.Tests.IGreeterA)Impl).Value;
                    }
                    #endregion

                    #region global::Macaron.InterfaceDelegation.Tests.IGreeterB
                    void global::Macaron.InterfaceDelegation.Tests.IGreeterB.Greet()
                    {
                        ((global::Macaron.InterfaceDelegation.Tests.IGreeterB)Impl).Greet();
                    }

                    float global::Macaron.InterfaceDelegation.Tests.IGreeterB.this[int index]
                    {
                        get => ((global::Macaron.InterfaceDelegation.Tests.IGreeterB)Impl)[index];
                    }

                    string global::Macaron.InterfaceDelegation.Tests.IGreeterB.Value
                    {
                        get => ((global::Macaron.InterfaceDelegation.Tests.IGreeterB)Impl).Value;
                        set => ((global::Macaron.InterfaceDelegation.Tests.IGreeterB)Impl).Value = value;
                    }
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void GeneratesDelegation_ForMultipleInterfaces_OnSeparateMembers()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IGreeterA
            {
                string GreetA(string name);
            }

            public interface IGreeterB
            {
                string GreetB(string name);
            }

            public class RealGreeter : IGreeterA, IGreeterB
            {
                public string GreetA(string name) => $"Hello, {name}!";

                public string GreetB(string name) => $"Hello, {name}!";
            }

            public partial class TestClass : IGreeterA, IGreeterB
            {
                [ImplementationOf(typeof(IGreeterA))]
                private IGreeterA ImplA { get; } = new RealGreeter();

                [ImplementationOf(typeof(IGreeterB))]
                private IGreeterB ImplB { get; } = new RealGreeter();
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class TestClass
                {
                    #region global::Macaron.InterfaceDelegation.Tests.IGreeterA
                    public string GreetA(string name)
                        => ImplA.GreetA(name);
                    #endregion

                    #region global::Macaron.InterfaceDelegation.Tests.IGreeterB
                    public string GreetB(string name)
                        => ImplB.GreetB(name);
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void GeneratesDelegation_ForPropertiesAndIndexer()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IPropertyExample
            {
                int Id { get; set; }

                string Name { get; }

                string this[int index] { get; set; }
            }

            public class PropertyExampleImpl : IPropertyExample
            {
                private readonly Dictionary<int, string> _data = new();

                public int Id { get; set; }

                public string Name => "Example";

                public string this[int index]
                {
                    get => _data[index];
                    set => _data[index] = value;
                }
            }

            public partial class TestPropertyDelegation : IPropertyExample
            {
                [ImplementationOf(typeof(IPropertyExample))]
                private readonly IPropertyExample _impl = new PropertyExampleImpl();
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class TestPropertyDelegation
                {
                    #region global::Macaron.InterfaceDelegation.Tests.IPropertyExample
                    public int Id
                    {
                        get => _impl.Id;
                        set => _impl.Id = value;
                    }

                    public string Name
                    {
                        get => _impl.Name;
                    }

                    public string this[int index]
                    {
                        get => _impl[index];
                        set => _impl[index] = value;
                    }
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void GeneratesDelegation_ForOverloadedMethods()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface ICalculator
            {
                int Add(int a, int b);

                double Add(double a, double b);
            }

            public class CalculatorImpl : ICalculator
            {
                public int Add(int a, int b) => a + b;

                public double Add(double a, double b) => a + b;
            }

            public partial class TestMethodOverloads : ICalculator
            {
                [ImplementationOf(typeof(ICalculator))]
                private readonly ICalculator _impl = new CalculatorImpl();
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class TestMethodOverloads
                {
                    #region global::Macaron.InterfaceDelegation.Tests.ICalculator
                    public int Add(int a, int b)
                        => _impl.Add(a, b);

                    public double Add(double a, double b)
                        => _impl.Add(a, b);
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void GeneratesDelegation_InStructType()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IStructInterface
            {
                void DoSomething();
            }

            public class StructImpl : IStructInterface
            {
                public void DoSomething() { }
            }

            public partial struct TestStructDelegation : IStructInterface
            {
                [ImplementationOf(typeof(IStructInterface))]
                private readonly IStructInterface _impl;

                public TestStructDelegation()
                {
                    _impl = new StructImpl();
                }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial struct TestStructDelegation
                {
                    #region global::Macaron.InterfaceDelegation.Tests.IStructInterface
                    public void DoSomething()
                        => _impl.DoSomething();
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void GeneratesDelegation_InRecordType()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IRecordInterface
            {
                void DoSomething();
            }

            public class RecordImpl : IRecordInterface
            {
                public void DoSomething() { }
            }

            public partial record TestRecordDelegation([ImplementationOf(typeof(IRecordInterface))] IRecordInterface Impl) : IRecordInterface
            {
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial record TestRecordDelegation
                {
                    #region global::Macaron.InterfaceDelegation.Tests.IRecordInterface
                    public void DoSomething()
                        => Impl.DoSomething();
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void GeneratesDelegation_InRecordStructType()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IRecordInterface
            {
                void DoSomething();
            }

            public class RecordImpl : IRecordInterface
            {
                public void DoSomething() { }
            }

            public partial record struct TestRecordDelegation([ImplementationOf(typeof(IRecordInterface))] IRecordInterface Impl) : IRecordInterface
            {
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial record struct TestRecordDelegation
                {
                    #region global::Macaron.InterfaceDelegation.Tests.IRecordInterface
                    public void DoSomething()
                        => Impl.DoSomething();
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void SkipsAlreadyImplementedImplicitMembers_When_UsingAutoMode()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IFoo
            {
                void MethodA();

                void MethodB();
            }

            public class FooImpl : IFoo
            {
                public void MethodA() { }

                public void MethodB() { }
            }

            public partial class TestPartialAutoImplicit : IFoo
            {
                [ImplementationOf(typeof(IFoo))]
                private readonly IFoo _impl = new FooImpl();

                public void MethodA() { }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class TestPartialAutoImplicit
                {
                    #region global::Macaron.InterfaceDelegation.Tests.IFoo
                    public void MethodB()
                        => _impl.MethodB();
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void SkipsAlreadyImplementedExplicitMembers_When_UsingAutoMode()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IFoo
            {
                void MethodA();

                void MethodB();
            }

            public class FooImpl : IFoo
            {
                public void MethodA() { }

                public void MethodB() { }
            }

            public partial class TestPartialAutoExplicit : IFoo
            {
                [ImplementationOf(typeof(IFoo))]
                private readonly IFoo _impl = new FooImpl();

                void IFoo.MethodA() { }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class TestPartialAutoExplicit
                {
                    #region global::Macaron.InterfaceDelegation.Tests.IFoo
                    public void MethodB()
                        => _impl.MethodB();
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void GeneratesFullDelegation_When_UsingImplicitMode()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IFoo
            {
                void MethodA();

                void MethodB();
            }

            public class FooImpl : IFoo
            {
                public void MethodA() { }

                public void MethodB() { }
            }

            public partial class TestPartialImplicit : IFoo
            {
                [ImplementationOf(typeof(IFoo), ImplementationMode.Implicit)]
                private readonly IFoo _impl = new FooImpl();
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class TestPartialImplicit
                {
                    #region global::Macaron.InterfaceDelegation.Tests.IFoo
                    public void MethodA()
                        => _impl.MethodA();

                    public void MethodB()
                        => _impl.MethodB();
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void SkipsAlreadyImplementedImplicitMembers_When_UsingImplicitMode()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IFoo
            {
                void MethodA();

                void MethodB();
            }

            public class FooImpl : IFoo
            {
                public void MethodA() { }

                public void MethodB() { }
            }

            public partial class TestPartialImplicit : IFoo
            {
                [ImplementationOf(typeof(IFoo), ImplementationMode.Implicit)]
                private readonly IFoo _impl = new FooImpl();

                public void MethodA() { }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class TestPartialImplicit
                {
                    #region global::Macaron.InterfaceDelegation.Tests.IFoo
                    public void MethodB()
                        => _impl.MethodB();
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void SkipsAlreadyImplementedExplicitMembers_When_UsingImplicitMode()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IFoo
            {
                void MethodA();

                void MethodB();
            }

            public class FooImpl : IFoo
            {
                public void MethodA() { }

                public void MethodB() { }
            }

            public partial class TestPartialImplicit : IFoo
            {
                [ImplementationOf(typeof(IFoo), ImplementationMode.Implicit)]
                private readonly IFoo _impl = new FooImpl();

                void IFoo.MethodA() { }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class TestPartialImplicit
                {
                    #region global::Macaron.InterfaceDelegation.Tests.IFoo
                    public void MethodB()
                        => _impl.MethodB();
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void GeneratesExplicitDelegation_When_UsingExplicitMode()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IService
            {
                void Execute();
            }

            public class ServiceImpl : IService
            {
                public void Execute() { }
            }

            public partial class TestExplicitMode : IService
            {
                [ImplementationOf(typeof(IService), ImplementationMode.Explicit)]
                private readonly IService _impl = new ServiceImpl();
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class TestExplicitMode
                {
                    #region global::Macaron.InterfaceDelegation.Tests.IService
                    void global::Macaron.InterfaceDelegation.Tests.IService.Execute()
                        => _impl.Execute();
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void SkipsAlreadyImplementedExplicitMembers_When_UsingExplicitMode()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IFoo
            {
                void MethodA();

                void MethodB();
            }

            public class FooImpl : IFoo
            {
                public void MethodA() { }

                public void MethodB() { }
            }

            public partial class TestPartialExplicit : IFoo
            {
                [ImplementationOf(typeof(IFoo), ImplementationMode.Explicit)]
                private readonly IFoo _impl = new FooImpl();

                void IFoo.MethodA() { }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class TestPartialExplicit
                {
                    #region global::Macaron.InterfaceDelegation.Tests.IFoo
                    void global::Macaron.InterfaceDelegation.Tests.IFoo.MethodB()
                        => _impl.MethodB();
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void GeneratesExplicitDelegation_EvenIfImplicitExists()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IFoo
            {
                void MethodA();

                void MethodB();
            }

            public class FooImpl : IFoo
            {
                public void MethodA() { }

                public void MethodB() { }
            }

            public partial class TestPartialExplicit : IFoo
            {
                [ImplementationOf(typeof(IFoo), ImplementationMode.Explicit)]
                private readonly IFoo _impl = new FooImpl();

                public MethodA() { }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class TestPartialExplicit
                {
                    #region global::Macaron.InterfaceDelegation.Tests.IFoo
                    void global::Macaron.InterfaceDelegation.Tests.IFoo.MethodA()
                        => _impl.MethodA();

                    void global::Macaron.InterfaceDelegation.Tests.IFoo.MethodB()
                        => _impl.MethodB();
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void SkipsAbstractMembers_InSameClass_When_GeneratingDelegation()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IAbstractExample
            {
                int GetAnswer();

                void DoSomething();
            }

            public class AbstractExampleImpl : IAbstractExample
            {
                public int GetAnswer() => 42;

                public void DoSomething() { }
            }

            public partial class TestAbstractDelegation : IAbstractExample
            {
                [ImplementationOf(typeof(IAbstractExample))]
                private readonly IAbstractExample _impl = new AbstractExampleImpl();

                public abstract int GetAnswer();
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class TestAbstractDelegation
                {
                    #region global::Macaron.InterfaceDelegation.Tests.IAbstractExample
                    public void DoSomething()
                        => _impl.DoSomething();
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void GeneratesOverride_ForAbstractMembers_InBaseClass()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IAbstractExample
            {
                int GetAnswer();

                int Value { get; }
            }

            public class AbstractExampleImpl : IAbstractExample
            {
                public int GetAnswer() => 42;

                public int Value { get => 42; }
            }

            public abstract class TestAbstractDelegationBase
            {
                public abstract int GetAnswer();

                public abstract int Value { get; }
            }

            public partial class TestAbstractDelegation : TestAbstractDelegationBase, IAbstractExample
            {
                [ImplementationOf(typeof(IAbstractExample))]
                private readonly IAbstractExample _impl = new AbstractExampleImpl();
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class TestAbstractDelegation
                {
                    #region global::Macaron.InterfaceDelegation.Tests.IAbstractExample
                    public override int GetAnswer()
                        => _impl.GetAnswer();

                    public override int Value
                    {
                        get => _impl.Value;
                    }
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void SkipsOverriddenMembers_InCurrentClass_When_GeneratingDelegation()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IAbstractExample
            {
                int GetAnswer();

                void DoSomething();

                int Value { get; }
            }

            public class AbstractExampleImpl : IAbstractExample
            {
                public int GetAnswer() => 42;

                public void DoSomething() { }

                int Value { get => 42; }
            }

            public abstract class TestAbstractDelegationBase
            {
                public abstract int GetAnswer();

                public abstract int Value { get; }
            }

            public partial class TestAbstractDelegation : TestAbstractDelegationBase
            {
                [ImplementationOf(typeof(IAbstractExample))]
                private readonly IAbstractExample _impl = new AbstractExampleImpl();

                public override int GetAnswer() => 42;

                public override int Value { get => 42; }
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class TestAbstractDelegation
                {
                    #region global::Macaron.InterfaceDelegation.Tests.IAbstractExample
                    public void DoSomething()
                        => _impl.DoSomething();
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void GeneratesDelegation_ForGenericMethod()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            public interface IGenericExample
            {
                int GetAnswer<T>() where T : class;
            }

            public class GenericExampleImpl : IGenericExample
            {
                public int GetAnswer<T>() where T : class => 42;
            }

            public partial class TestGenericDelegation : TestGenericDelegationBase
            {
                [ImplementationOf(typeof(IGenericExample))]
                private readonly IGenericExample _impl = new GenericExampleImpl();
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class TestGenericDelegation
                {
                    #region global::Macaron.InterfaceDelegation.Tests.IGenericExample
                    public int GetAnswer<T>()
                        where T : class
                        => _impl.GetAnswer<T>();
                    #endregion
                }
            }

            """
        );
    }

    [Test]
    public void IgnoresNonLiftableMembers_When_UsingLiftAttribute()
    {
        Assert(
            sourceCode:
            """
            namespace Macaron.InterfaceDelegation.Tests;

            // 베이스 클래스 항목은 무시됨
            public class Base
            {
                public int BaseValue { get; }

                public void BaseMethod() { }

                public virtual void BaseVirtualMethod() { }
            }

            public class Foo : Base
            {
                // 인덱서는 무시됨
                public int this[int index]
                {
                    get => 0;
                    set => { }
                }

                public int GetAnswer<T>() where T : class => 42;

                // 오버라이드 멤버는 무시됨
                public override void BaseVirtualMethod() { }

                // public인 아닌 멤버는 무시됨
                protected int GetAnswer() => 42;
            }

            public partial class Bar
            {
                [Lift]
                private readonly Foo _impl = new();
            }
            """,
            expected:
            """
            // <auto-generated />
            #nullable enable

            namespace Macaron.InterfaceDelegation.Tests
            {
                partial class Bar
                {
                    #region global::Macaron.InterfaceDelegation.Tests.Foo
                    public int GetAnswer<T>()
                        where T : class
                        => _impl.GetAnswer<T>();
                    #endregion
                }
            }

            """
        );
    }
}
